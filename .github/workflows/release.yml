name: Release

on:
  push:
    paths:
      - 'pkg/version/version.go'
    branches:
      - main
      - 'release/**'

  workflow_dispatch:

env:
  DOCKERHUB_IMAGE: solarwinds/solarwinds-otel-collector

jobs:
  govulncheck-modules: 
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Go vulnerabilities check
        run: |
          make ci-vulncheck-modules 2>&1
  release_checks:
    name: Release Checks
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.get-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get Current Tag
        id: get-tag
        run: echo "tag=$(grep -oP '(?<=const Version = ")[^"]+' "./pkg/version/version.go")" >> $GITHUB_OUTPUT
      - name: Verify that release does not already exist
        env:
          # for gh cli
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! gh release view "v${{ steps.get-tag.outputs.tag }}" 2>&1 | grep -q "^release not found$"; then
            echo "Release v${{ steps.get-tag.outputs.tag }} already exists on GitHub."
            exit 1
          fi
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_SOLARWINDS_ORG_LOGIN }}
          password: ${{ secrets.ENOPS5919_OPENTELEMETRYCOLLECTOR_DOCKER_HUB_CI_OAT }}
      - name: Verify that Docker images exist
        run: |
          for suffix in verified playground k8s; do
            image="${{ env.DOCKERHUB_IMAGE }}:${{ steps.get-tag.outputs.tag }}-${suffix}"
            if docker manifest inspect "$image" 2>&1 | grep -q "no such manifest"; then
              echo "Docker image $image does not exist on DockerHub."
              exit 1
            fi
          done
  create_release:
    runs-on: ubuntu-latest
    name: Create GitHub Release
    needs:
      - release_checks
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find Previous Tag
        run: |
          PREVIOUS_TAG=$(git tag --sort=version:refname | grep -P "^v\d+\.\d+\.\d+$" | tail -n 1)
          echo "Previous tag: $PREVIOUS_TAG"
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

      - name: Create GitHub Release
        env:
          # for gh cli
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.release_checks.outputs.image_tag }} \
            --title v${{ needs.release_checks.outputs.image_tag }} \
            --generate-notes \
            --notes-start-tag ${{ env.PREVIOUS_TAG }}
      
      - name: Append Docker image links to release notes
        env:
          # for gh cli
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release view v${{ needs.release_checks.outputs.image_tag }} --json body -q .body > notes.md
          echo "" >> notes.md
          echo "### Docker Images" >> notes.md
          echo "- [Playground](https://hub.docker.com/r/${{ env.DOCKERHUB_IMAGE }}/tags?name=${{ needs.release_checks.outputs.image_tag }}-playground)" >> notes.md
          echo "- [Verified](https://hub.docker.com/r/${{ env.DOCKERHUB_IMAGE }}/tags?name=${{ needs.release_checks.outputs.image_tag }}-verified)" >> notes.md
          echo "- [K8s](https://hub.docker.com/r/${{ env.DOCKERHUB_IMAGE }}/tags?name=${{ needs.release_checks.outputs.image_tag }}-k8s)" >> notes.md

          gh release edit v${{ needs.release_checks.outputs.image_tag }} --notes-file notes.md
      - name: Tag Go packages on GitHub
        run: |
          folders=("./pkg")

          for folder in "${folders[@]}"; do
              for package_folder in $folder/*/; do
                  if [ -f "$package_folder/go.mod" ]; then
                      git tag ${package_folder#./}v${{ needs.release_checks.outputs.image_tag }}
                      git push origin ${package_folder#./}v${{ needs.release_checks.outputs.image_tag }}
                      echo "Pushed tag ${package_folder#./}v${{ needs.release_checks.outputs.image_tag }}"
                  fi
              done
          done